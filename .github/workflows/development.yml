name: Development

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
  workflow_call:

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read

jobs:
  lint:
    name: Code standards
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v3

      - name: "üîß Setup pnpm"
        uses: pnpm/action-setup@v2.2.4
        with:
          package_json_file: client/package.json

      - name: "üîß setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "üîß Get pnpm store directory"
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: "üîß Setup pnpm cache"
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: "üì¶ Install deps (with cache)"
        run: cd client && pnpm install

      - name: "üîç lint code"
        run: pnpm lint --if-present
        working-directory: client

  build:
    name: Build application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v3

      - name: "üîß Setup pnpm"
        uses: pnpm/action-setup@v2.2.4
        with:
          package_json_file: client/package.json

      - name: "üîß setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "üîß Get pnpm store directory"
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: "üîß Setup pnpm cache"
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: "üì¶ Install deps (with cache)"
        run: cd client && pnpm install

      - name: "üîç build application"
        run: npm run build --if-present
        working-directory: client

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          working-directory: server

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"
