name: "Semantic release"

on:
  push:
    branches:
      - main
      - alpha
      - beta
      - next

concurrency:
  #  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Set environment variables
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_ENVIRONMENT: ${{ steps.env.outputs.DEPLOY_ENVIRONMENT }}
      VERCEL_ENVIRONMENT: ${{ steps.env.outputs.VERCEL_ENVIRONMENT }}
    steps:
      - name: "☁️ compute environment variables"
        id: env
        run: |
          echo "DEPLOY_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo ${{ github.ref_name }})" >> $GITHUB_OUTPUT
          echo "VERCEL_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo 'preview')" >> $GITHUB_OUTPUT

  test:
    name: Test, lint and build
    uses: ./.github/workflows/development.yml

  release:
    environment:
      name: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    outputs:
      release-tag: ${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - setup
      - test
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup pnpm"
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.8.x

      - name: "🔧 setup node"
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: "🔧 Get pnpm store directory"
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: "🔧 Setup pnpm cache"
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: "📦 Install deps (with cache)"
        run: cd client && pnpm install

      - name: "🚀 release"
        id: semantic-release
        uses: 0-vortex/release@v11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-vercel:
    environment:
      name: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
    name: Deploy to Vercel
    needs:
      - release
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup pnpm"
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.8.x

      - name: "🔧 setup node"
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: "🔧 install npm@latest vercel@canary"
        run: cd client && pnpm install -g vercel@canary

      - name: "📦 Pull Vercel Environment Information"
        run: pnpx vercel pull --yes --environment=${{ needs.setup.outputs.VERCEL_ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: "📦 Pull Vercel Build Environment"
        run: pnpx vercel env pull .env.local --token=${{ secrets.VERCEL_TOKEN }}

      - name: "📂 Build Project Artifacts"
        run: pnpx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: "🚀 Deploy Project Artifacts to Vercel"
        run: pnpx vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-railway:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false

      - name: Install dependencies
        run: go get -v ./...

      - name: Build
        run: go build -v -o ./bin/ ./...

      - name: Deploy Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            docker
