---
import type { HTMLAttributes } from "astro/types";
import { type VariantProps, cva } from "class-variance-authority";
import { cn } from "@/lib/utils/merge-classes";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-1 disabled:opacity-50 disabled:pointer-events-none data-[state=open]:bg-slate-100",
  {
    variants: {
      variant: {
        default: "bg-slate-900 text-white hover:bg-slate-700",
        destructive: "bg-red-500 text-white hover:bg-red-600",
        outline: "bg-transparent border border-slate-300 hover:bg-slate-100",
        primary: "bg-primary-600 text-white hover:bg-primary-800",
        subtle: "bg-slate-100 text-slate-900 hover:bg-slate-200",
        ghost:
          "bg-transparent hover:bg-slate-100 data-[state=open]:bg-transparent",
        link: "bg-transparent underline-offset-4 hover:underline text-slate-900 hover:bg-transparent",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-2 rounded-md",
        lg: "h-11 px-8 rounded-md",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "default",
    },
  }
);
export interface Props
  extends HTMLAttributes<"button">,
    VariantProps<typeof buttonVariants> {}

const { variant = "primary", size = "default", ...props } = Astro.props;
---

<button
  class={cn(buttonVariants({ variant, size, className: props.class }))}
  {...props}
>
  <slot />
</button>
