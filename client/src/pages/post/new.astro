---
import Input from "@/components/ui/input.astro";
import Button, { buttonVariants } from "@/components/ui/button.astro";
import Label from "@/components/ui/label.astro";
import NewPostLayout from "@/layouts/new-post-layout.astro";
import ErrorMessage from "@/components/error-message.astro";

const cookie = Astro.cookies.get("auth_token");

if (!cookie?.value) {
  const params = new URLSearchParams({
    redirectedFrom: "/post/new",
  });
  return Astro.redirect(`/login?${params.toString()}`);
}
---

<NewPostLayout title="Create a Post">
  <form method="POST" class="my-10">
    <label
      for="new-post-image"
      id="new-post-image-label"
      class={buttonVariants({
        variant: "outline",
        class: "mb-4",
      })}
    >
      Add cover image
      <input type="file" name="image" id="new-post-image" class="hidden" />
    </label>
    <div id="preview-image" class="hidden h-auto items-end gap-6 mb-6">
      <img src="" alt="New blog image" class="w-96 h-56 object-contain" />
      <div class="flex gap-4">
        <label
          for="new-post-image"
          class={buttonVariants({
            variant: "outline",
            size: "sm",
          })}
        >
          Change
          <input type="file" name="image" id="new-post-image" class="hidden" />
        </label>
        <Button variant="destructive" size="sm">Remove</Button>
      </div>
    </div>
    <ErrorMessage id="post-img-err" />
    <div class="mb-4">
      <Label for="new-post-title" class="text-gray-400 mb-8">Title</Label>
      <Input
        type="text"
        name="title"
        placeholder="Your post title..."
        id="new-post-title"
        class="border-gray-100 focus:ring-gray-200"
      />
    </div>
    <ErrorMessage id="post-title-err" />
    <div class="my-8">
      <ErrorMessage id="post-content-err" />
      <Label for="editor" class="text-gray-400">Content</Label>
      <div id="editor" class="mt-2"></div>
    </div>
  </form>
</NewPostLayout>
<script>
  // @ts-ignore
  import Editor from "@toast-ui/editor";

  const editor = new Editor({
    el: document.querySelector("#editor"),
    height: "600px",
    initialEditType: "markdown",
  });

  const submitButton = document.getElementById(
    "submit-new-post-btn"
  ) as HTMLButtonElement;
  const submitAsDraft = document.getElementById(
    "submit-as-draft-btn"
  ) as HTMLButtonElement;
  const previewImageContainer = document.getElementById(
    "preview-image"
  ) as HTMLDivElement;

  const submitPost = (draft = false) => {
    let title = (document.getElementById("new-post-title") as HTMLInputElement)
      .value;
    const file = imageInput.files?.[0];
    const markdown = editor.getMarkdown();
    let error = document.getElementById("post-title-err")!;

    // TODO:

    if (!title) {
      error.classList.remove("hidden");
      error.classList.add("flex");
      error.querySelector("span")!.textContent = "the post title is required";
      return;
    }

    if (!markdown) {
      error = document.getElementById("post-content-err")!;
      error.classList.remove("hidden");
      error.classList.add("flex");
      error.querySelector("span")!.textContent = "the post content is required";
      return;
    }

    if (!file) {
      error = document.getElementById("post-img-err")!;
      error.classList.remove("hidden");
      error.classList.add("flex");
      error.querySelector("span")!.textContent = "the post image is required";
      return;
    }

    submitButton.classList.add("disabled:cursor-not-allowed")
    submitButton.disabled = true;
    submitButton.querySelector("svg").classList.remove("hidden")

    submitAsDraft.classList.add("disabled:cursor-not-allowed")
    submitAsDraft.disabled = true;
    submitAsDraft.querySelector("svg").classList.remove("hidden")

    const isPublished = !draft;
    const formData = new FormData();
    formData.append("title", title);
    formData.append("body", markdown);
    formData.append("is_draft", draft.toString());
    formData.append("is_published", isPublished.toString());
    if (file) {
      formData.append("image", file);
    }

    const BASE_URL = import.meta.env.PUBLIC_API;

    fetch(`${BASE_URL}/posts`, {
      method: "POST",
      body: formData,
      credentials: "include",
    })
      .then((response) => response.json())
      .then((data) => {
        window.location.href = `/posts/${data.data.id}`;
      })
      .catch((error) => {
        console.error(error)
        submitButton.classList.remove("disabled:cursor-not-allowed")
        submitButton.disabled = false;
        submitButton.querySelector("svg").classList.add("hidden")

        submitAsDraft.classList.remove("disabled:cursor-not-allowed")
        submitAsDraft.disabled = false;
        submitAsDraft.querySelector("svg").classList.add("hidden")
  });
  };

  
  submitButton.addEventListener("click", () => submitPost());
  submitAsDraft.addEventListener("click", () => submitPost(true));

  const imageInput = document.getElementById(
    "new-post-image"
  ) as HTMLInputElement;
  imageInput.addEventListener("change", () => {
    const file = imageInput.files?.[0];
    if (!file) return;

    const validTypes = ["image/jpeg", "image/png"];
    if (!validTypes.includes(file.type)) {
      alert("Invalid file type. Only JPG and PNG files are allowed.");
      return;
    }

    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      document.getElementById("new-post-image-label")?.classList.add("hidden");
      previewImageContainer.classList.remove("hidden");
      previewImageContainer.classList.add("flex");
      previewImageContainer.querySelector("img")!.src = reader.result as string;
    };
    reader.onerror = (error) => {
      console.log("Error: ", error);
    };
  });

  const removeSelectedImage = previewImageContainer.querySelector("button")!;
  removeSelectedImage.addEventListener("click", (e) => {
    e.preventDefault();

    previewImageContainer.classList.add("hidden");
    previewImageContainer.classList.remove("flex");
    previewImageContainer.querySelector("img")!.src = "";
    document.getElementById("new-post-image-label")?.classList.remove("hidden");
  });
</script>
