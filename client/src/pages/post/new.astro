---
import Input from "@/components/ui/input.astro";
import Button, { buttonVariants } from "@/components/ui/button.astro";
import Label from "@/components/ui/label.astro";
import NewPostLayout from "@/layouts/new-post-layout.astro";
---

<NewPostLayout title="Create a Post">
  <form method="POST" class="my-10">
    <label
      for="new-post-image"
      id="new-post-image-label"
      class={buttonVariants({
        variant: "outline",
        class: "mb-4",
      })}
    >
      Add cover image
      <input type="file" name="image" id="new-post-image" class="hidden" />
    </label>
    <div id="preview-image" class="hidden h-auto items-end gap-6 mb-6">
      <img src="" alt="New blog image" class="w-96 h-56 object-contain">
      <div class="flex gap-4">
        <label
          for="new-post-image" 
          class={buttonVariants({
            variant: "outline",
            size: "sm"
          })}
        >
          Change
          <input type="file" name="image" id="new-post-image" class="hidden" />
        </label>
        <Button variant="destructive" size="sm">Remove</Button>
      </div>
    </div>
    <div class="">
      <Label for="new-post-title" class="text-gray-400 mb-8">
        Title
      </Label>
      <Input
        type="text"
        name="title"
        placeholder="Your post title..."
        id="new-post-title"
        class="border-gray-100 focus:ring-gray-200"
      />
    </div>
    <div class="my-8">
      <Label for="editor" class="text-gray-400">Content</Label>
      <div id="editor" class="mt-2"></div>
    </div>
  </form>
</NewPostLayout>
<script>
  import Editor from '@toast-ui/editor';

  const editor = new Editor({
    el: document.querySelector('#editor'),
    height: '600px',
    initialEditType: 'markdown',
  });

  const previewImageContainer = (document.getElementById("preview-image") as HTMLDivElement);
const submitPost = (draft = false) => {
  let title = (document.getElementById("new-post-title") as HTMLInputElement).value;
  const file = imageInput.files?.[0]
  const markdown = editor.getMarkdown();

  const isPublished = !draft;
  const formData = new FormData();
  formData.append("title", title);
  formData.append("body", markdown);
  formData.append("is_draft", draft.toString());
  formData.append("is_published", isPublished.toString());
  if (file) {
    formData.append("image", file);
  }

  fetch("http://localhost:5000/posts", {
    method: "POST",
    headers: {
      "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOiJlZTAzYWU0Zi02ZTE0LTRkMmEtOGRiZC0xZGMyZjk4ZTE4ZTQiLCJleHAiOjE2OTYxMDc3OTAsImlhdCI6MTY5NTUwMjk5MH0.4EdVsO1VjYsQgwdtqGiapPLdUsFoKKMRNehSX4PrRN8"
    },
    body: formData,
  })
    .then((response) => response.json())
    .then((data) => {
      window.location.href = "/dashboard";
    })
    .catch((error) => console.error(error));
};

const submitButton = (document.getElementById("submit-new-post-btn") as HTMLButtonElement);
submitButton.addEventListener("click", () => submitPost());

const submitAsDraft = (document.getElementById("submit-as-draft-btn") as HTMLButtonElement);
submitAsDraft.addEventListener("click", () => submitPost(true));

const imageInput = (document.getElementById("new-post-image") as HTMLInputElement);
imageInput.addEventListener("change", () => {
  const file = imageInput.files?.[0]
  if (!file) return;

  const validTypes = ["image/jpeg", "image/png"];
  if (!validTypes.includes(file.type)) {
    alert("Invalid file type. Only JPG and PNG files are allowed.");
    return;
  }

  const reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = () => {
    document.getElementById("new-post-image-label")?.classList.add("hidden");
    previewImageContainer.classList.remove("hidden");
    previewImageContainer.classList.add("flex");
    previewImageContainer.querySelector("img")!.src = reader.result as string;
  };
  reader.onerror = (error) => {
    console.log('Error: ', error);
  };
})

const removeSelectedImage = previewImageContainer.querySelector("button")!;
removeSelectedImage.addEventListener("click", (e) => {
  e.preventDefault()

  previewImageContainer.classList.add("hidden");
  previewImageContainer.classList.remove("flex");
  previewImageContainer.querySelector("img")!.src = "";
  document.getElementById("new-post-image-label")?.classList.remove("hidden");
})
</script>