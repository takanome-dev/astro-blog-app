---
import { type Post } from "@/types/post";
import DashboardLayout from "@/layouts/dashboard-layout.astro";
import { siteConfig } from "@/lib/config/site";
import { timeAgo } from "@/lib/utils/format";
import ActionMenu from "@/components/action-menu.astro";
import Textarea from "@/components/ui/textarea.astro";
import Button from "@/components/ui/button.astro";
import ErrorMessage from "@/components/error-message.astro";
import Layout from "@/layouts/layout.astro";
import type { User } from "@/types/user";
import Icon from "astro-icon";
import EmptyPlaceholder from "@/components/placeholder/empty-placeholder.astro";
import PlaceholderTitle from "@/components/placeholder/placeholder-title.astro";
import PlaceholderDescription from "@/components/placeholder/placeholder-description.astro";
import PlaceholderIcon from "@/components/placeholder/placeholder-icon.astro";

const { id } = Astro.params;

const cookie = Astro.cookies.get("auth_token");
const BASE_URL = import.meta.env.PUBLIC_API;

const data: Post = await fetch(`${BASE_URL}/posts/${id}`)
  .then(async (response) => await response.json())
  .then((data) => data.data)
  .catch((error) => {
    console.error(error);
    return {};
  });


const user: User = await fetch(`${BASE_URL}/users/current`, {
  method: "GET",
  headers: {
    Cookie: `auth_token=${cookie?.value}`,
  },
})
  .then(async (response) => await response.json())
  .then((data) => data.data)
  .catch((error) => {
    console.error(error);
    return {};
  });

const PageLayout = cookie ? DashboardLayout : Layout;
---

<PageLayout title={data?.post?.title}>
  <div class={cookie ? "" : "mx-36 mb-20"}>
    <div class="my-4 w-full h-[448px] overflow-hidden">
      <img
        src={data?.post?.image}
        alt={data?.post?.title}
        class="w-full h-full rounded-md"
      />
    </div>
    <div class="flex justify-between items-center">
      <div class="flex gap-4 items-center mb-4">
        <img
          src={siteConfig.avatarUrl}
          alt="My GH Avatar"
          class="w-16 h-16 rounded-full"
        />
        <div>
          <p>{data?.user?.username}</p>
          <span class="text-slate-500 text-sm">
            {
              Intl.DateTimeFormat("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              }).format(new Date(data?.post?.created_at))
            }
          </span>
        </div>
      </div>
      {!cookie || user?.id !== data?.user?.id ? "" : <ActionMenu />}
    </div>
    <div class="my-8">
      <h2 class="text-5xl font-bold">{data?.post?.title}</h2>
    </div>
    <div data-body={data?.post?.body} id="post-body-placeholder"></div>
    <div id="viewer"></div>
    <div class="my-10 flex flex-col gap-10">
      <div class="w-full h-[2px] bg-slate-300"></div>
      <h2 class="text-3xl font-bold">Comments</h2>
      {
        cookie && data?.post?.is_published && (
          <form class="flex gap-4" id="comment-form" method="POST">
            <img
              src={siteConfig.avatarUrl}
              alt="My GH Avatar"
              class="w-12 h-12 rounded-full"
            />
            <div class="flex flex-col gap-2 w-full">
              <div class="flex flex-col gap-2 w-1/2">
                <Textarea
                  name="comment"
                  required
                  placeholder="Write a comment..."
                  minlength={10}
                />
                <ErrorMessage id="error-msg" />
              </div>
              <Button type="submit" class="w-fit">
                Submit
              </Button>
            </div>
          </form>
        )
      }
      <div class="flex flex-col gap-4">
        {
          !data?.comments?.length ? (
          <EmptyPlaceholder class="min-h-fit">
            <PlaceholderIcon name="tabler:file-search" class="text-slate-600" />
            <PlaceholderTitle>No comments yet.</PlaceholderTitle>
          </EmptyPlaceholder>
          ) : (
            data?.comments?.map((c, idx) => (
              <div
                class="flex items-center justify-between"
                id={`user-comment-${idx}`}
                data-comment-id={c.comment.id}
              >
                <div class="flex gap-4 items-center mb-4">
                  <img
                    src={siteConfig.avatarUrl}
                    alt="My GH Avatar"
                    class="w-12 h-12 rounded-full"
                  />
                  <div class="flex flex-col gap-2">
                    <div class="flex items-center gap-2">
                      <p class="text-sm">{c?.user?.username}</p>
                      <div class="flex items-center gap-2">
                        <span class="text-slate-500 text-sm">
                          {timeAgo(new Date(c?.comment.created_at))}
                        </span>
                        {c?.comment.edited_at && (
                          <small class="text-slate-500 text-sm">(edited)</small>
                        )}
                      </div>
                    </div>
                    <p id={`comment-${idx}`}>{c?.comment.body}</p>
                  </div>
                </div>
                {cookie && c?.user.id === user.id && (
                  <div class="flex items-center justify-center">
                    <div class="relative inline-block text-left">
                      <Button
                        variant="ghost"
                        id={`comment-action-btn-${idx}`}
                        aria-haspopup="true"
                        aria-expanded="true"
                        aria-controls={`comment-action-${idx}`}
                        aria-label="Menu actions dropdown"
                        size="sm"
                      >
                        <Icon
                          name="tabler:dots-vertical"
                          class="w-6 h-6 text-slate-500 cursor-pointer"
                        />
                      </Button>
                      <div
                        id={`comment-action-${idx}`}
                        class="hidden z-30 origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5"
                      >
                        <div
                          class="py-2 p-2 divide-y divide-gray-100"
                          role="menu"
                          aria-orientation="vertical"
                          aria-labelledby={`comment-action-btn-${idx}`}
                        >
                          <div
                            class="flex rounded-md px-4 py-2 text-sm text-slate-700 hover:bg-gray-100 active:bg-blue-100 cursor-pointer"
                            role="menuitem"
                            id="edit-comment"
                          >
                            <span>Edit</span>
                          </div>
                          <div
                            class="flex rounded-md px-4 py-2 text-sm text-red-700 hover:bg-red-100 active:bg-red-100 cursor-pointer"
                            role="menuitem"
                            id="delete-comment"
                          >
                            <span>Delete</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))
          )
        }
      </div>
    </div>
  </div>
  <!-- TODO: add scroll to top -->
  <!-- <div
    class="fixed bottom-0 right-0 z-50 flex items-center justify-center w-16 h-16 rounded-full bg-blue-500 hover:bg-blue-600 active:bg-blue-700 cursor-pointer"
    aria-label="Scroll to top"
    title="Scroll to top"
  ></div> -->

  <!-- edit modal here -->
  <div
    class="hidden fixed inset-0 z-50 items-center justify-center w-full h-full bg-black bg-opacity-50"
    id="edit-modal"
  >
    <div
      class="relative w-1/3 h-1/3 bg-white rounded-md px-6 flex items-center"
    >
      <div class="absolute top-2 right-2">
        <button
          class="flex items-center justify-center w-6 h-6 rounded-full bg-slate-200 hover:bg-slate-300 active:bg-slate-400 cursor-pointer"
          aria-label="Close modal"
          title="Close modal"
          id="close-modal"
        >
          <Icon name="tabler:x" class="w-4 h-4 text-slate-800 cursor-pointer" />
        </button>
      </div>
      <form
        class="flex flex-col gap-4 w-full"
        id="edit-comment-form"
        method="POST"
      >
        <h2 class="text-2xl font-bold text-slate-700 mb-4">Edit comment</h2>
        <Textarea
          name="comment"
          required
          placeholder="Write a comment..."
          minlength={10}
          class="w-full"
        />
        <ErrorMessage id="edit-comment-error" />
        <Button type="submit" class="w-fit">Submit</Button>
      </form>
    </div>
  </div>
</PageLayout>
<script>
  // @ts-ignore
  import Editor from "@toast-ui/editor";

  const postBodyPlaceholder = document.getElementById("post-body-placeholder");

  new Editor.factory({
    el: document.querySelector("#viewer"),
    viewer: true,
    initialValue: postBodyPlaceholder?.getAttribute("data-body"),
  });

  if (document.querySelector("#viewer .toastui-editor-contents")) {
    postBodyPlaceholder!.remove();
  }

  /* ------------------------ Submit comment form ------------------------ */

  const form = document.getElementById("comment-form") as HTMLFormElement;
  const errorMsg = document.getElementById("error-msg") as HTMLDivElement;
  const BASE_URL = import.meta.env.PUBLIC_API;
  const postId = window.location.pathname.split("/").pop();

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const body = formData.get("comment") as string;

    const response = await fetch(`${BASE_URL}/comments`, {
      method: "POST",
      mode: "cors",
      credentials: "include",
      body: JSON.stringify({
        body,
        post_id: postId,
      }),
    });

    const data = await response.json();

    if (data.error) {
      errorMsg.classList.remove("hidden");
      errorMsg.classList.add("flex");
      errorMsg.querySelector("span")!.textContent = data.error;
    } else {
      form.reset();
      window.location.reload();
    }
  });

  /* ------------------------ Comment action dropdown ------------------------ */

  const commentsBtns = document.querySelectorAll(
    "[id^=comment-action-btn-]"
  ) as NodeListOf<HTMLButtonElement>;

  commentsBtns.forEach((btn) => {
    const commentIdx = btn?.id.split("-").pop();
    const dropdown = document.getElementById(`comment-action-${commentIdx}`)!;
    const editBtn = dropdown?.querySelector("#edit-comment") as HTMLDivElement;
    const deleteBtn = dropdown?.querySelector(
      "#delete-comment"
    ) as HTMLDivElement;

    btn?.addEventListener("click", () => {
      dropdown?.classList.toggle("hidden");
    });

    btn?.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        dropdown.classList.toggle("hidden");
      }
    });

    window.addEventListener("click", (e) => {
      if (
        !btn?.contains(e.target as Node) &&
        !dropdown?.contains(e.target as Node)
      ) {
        dropdown?.classList.add("hidden");
      }
    });

    /* ------------------------ Edit comment ------------------------ */

    const editModal = document.getElementById("edit-modal")!;
    const closeModal = document.getElementById("close-modal")!;
    const userComment = document.getElementById(
      `user-comment-${commentIdx}`
    ) as HTMLDivElement;
    const commentId = userComment.getAttribute("data-comment-id");
    const editCommentForm = document.getElementById(
      "edit-comment-form"
    ) as HTMLFormElement;
    const editErrorMsg = document.getElementById(
      "edit-comment-error"
    ) as HTMLDivElement;

    editBtn.addEventListener("click", () => {
      editModal.classList.remove("hidden");
      editModal.classList.add("flex");

      const comment = document.getElementById(
        `comment-${commentIdx}`
      )!.textContent;
      editModal.querySelector("textarea")!.textContent = comment;

      editCommentForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(editCommentForm);
        const body = formData.get("comment") as string;
        const response = await fetch(`${BASE_URL}/comments/${commentId}`, {
          method: "PUT",
          mode: "cors",
          credentials: "include",
          body: JSON.stringify({
            body,
          }),
        });

        const data = await response.json();

        if (data.error) {
          editErrorMsg.classList.remove("hidden");
          editErrorMsg.classList.add("flex");
          editErrorMsg.querySelector("span")!.textContent = data.error;
        } else {
          editModal.classList.remove("flex");
          editModal.classList.add("hidden");
          window.location.reload();
        }
      });
    });

    /* ------------------------ Delete comment ------------------------ */

    deleteBtn?.addEventListener("click", async () => {
      const deleteComment = confirm(
        "Are you sure you want to delete this comment?"
      );

      if (deleteComment) {
        const response = await fetch(`${BASE_URL}/comments/${commentId}`, {
          method: "DELETE",
          credentials: "include",
        });

        const data = await response.json();

        if (data.error) {
          alert(data.error);
        } else {
          window.location.reload();
        }
      }
    });

    closeModal.addEventListener("click", () => {
      editModal.classList.remove("flex");
      editModal.classList.add("hidden");
    });

    editModal.addEventListener("click", (e) => {
      if (e.target === editModal) {
        editModal.classList.remove("flex");
        editModal.classList.add("hidden");
      }
    });
  });
</script>
