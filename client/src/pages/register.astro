---
import Label from "@/components/ui/label.astro";
import Input from "@/components/ui/input.astro";
import Button from "@/components/ui/button.astro";
import AuthLayout from "@/layouts/auth-layout.astro";
import ErrorMessage from "@/components/error-message.astro";

interface Props {
  title: string;
}

---

<AuthLayout title="Sign up">
  <div class="shadow-md rounded-xl w-[400px] px-8 py-16">
    <h1 class="text-center text-xl font-bold">Create a new account</h1>
    <ErrorMessage id="register-error-msg" class="mt-4" />
    <form class="flex flex-col gap-8 mt-8" id="register-form" method="POST">
      <div class="flex flex-col gap-2">
        <Label for="username">Username</Label>
        <Input type="text" name="username" required minlength={4} placeholder="johndoe" />
      </div>
      <div class="flex flex-col gap-2">
        <Label for="email">Email</Label>
        <Input type="email" name="email" required placeholder="johndoe@gmail.com" />
      </div>
      <div class="flex flex-col gap-2">
        <Label for="password">Password</Label>
        <Input type="password" name="password" required minlength={8} placeholder="supersecret" />
      </div>
      <Button type="submit">Sign up</Button>
      <div class="flex items-center justify-between">
        <p class="">Already have an account?</p>
        <a href="/login" class="text-primary-600">Login</a>
      </div>
    </form>
  </div>
</AuthLayout>
<script>
  const BASE_URL = import.meta.env.PUBLIC_API

  const form = document.getElementById("register-form") as HTMLFormElement;
  const errorMsg = document.getElementById("register-error-msg") as HTMLDivElement;

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    fetch(`${BASE_URL}/auth/register`, {
      method: "POST",
      body: JSON.stringify(data),
      mode: "cors",
      credentials: "include",
    })
      .then(async (res) => {
        if (!res.ok) {
          const error = await res.json();
          throw new Error(error.error);
        } else {
          return res.json();
        }
      })
      .then((res) => {
        localStorage.setItem("user", JSON.stringify(res.data));
        location.href = "/dashboard";
      }).catch(err => {
        errorMsg.classList.remove("hidden");
        errorMsg.classList.add("flex");
        errorMsg.querySelector("span")!.textContent = err.message;
      });
  });
</script>