// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: comments.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, body, user_id, post_id) VALUES ($1, $2, $3, $4) RETURNING id, body, user_id, post_id, created_at, updated_at, deleted_at, edited_at
`

type CreateCommentParams struct {
	ID     uuid.UUID `json:"id"`
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.Body,
		arg.UserID,
		arg.PostID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getAllComments = `-- name: GetAllComments :many
SELECT id, body, user_id, post_id, created_at, updated_at, deleted_at, edited_at FROM comments
ORDER BY created_at DESC
`

func (q *Queries) GetAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, body, user_id, post_id, created_at, updated_at, deleted_at, edited_at FROM comments WHERE id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCommentByID(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EditedAt,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments
SET body = $2, edited_at = NOW()
WHERE id = $1
`

type UpdateCommentParams struct {
	ID   uuid.UUID `json:"id"`
	Body string    `json:"body"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.ID, arg.Body)
	return err
}
