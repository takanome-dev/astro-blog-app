// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, title, body, image, user_id, is_published, is_draft) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title, body, user_id, is_published, is_draft, created_at, updated_at, deleted_at, image
`

type CreatePostParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Body        string    `json:"body"`
	Image       string    `json:"image"`
	UserID      uuid.UUID `json:"user_id"`
	IsPublished bool      `json:"is_published"`
	IsDraft     bool      `json:"is_draft"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Image,
		arg.UserID,
		arg.IsPublished,
		arg.IsDraft,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.IsPublished,
		&i.IsDraft,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Image,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT posts.id, posts.title, posts.body, posts.user_id, posts.is_published, posts.is_draft, posts.created_at, posts.updated_at, posts.deleted_at, posts.image, users.id, users.username, users.email, users.password, users.created_at, users.updated_at, users.deleted_at FROM posts
JOIN users ON posts.user_id = users.id
ORDER BY posts.created_at DESC
`

type GetAllPostsRow struct {
	Post Post `json:"post"`
	User User `json:"user"`
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Body,
			&i.Post.UserID,
			&i.Post.IsPublished,
			&i.Post.IsDraft,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.Post.DeletedAt,
			&i.Post.Image,
			&i.User.ID,
			&i.User.Username,
			&i.User.Email,
			&i.User.Password,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT posts.id, posts.title, posts.body, posts.user_id, posts.is_published, posts.is_draft, posts.created_at, posts.updated_at, posts.deleted_at, posts.image, users.id, users.username, users.email, users.password, users.created_at, users.updated_at, users.deleted_at, 
COALESCE(
  (
    SELECT json_agg(json_build_object('comment', comments, 'user', users))::text
    FROM comments 
    JOIN users ON comments.user_id = users.id
    WHERE posts.id = comments.post_id
  ), 
  NULL
  ) as comments
FROM posts
JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
`

type GetPostByIDRow struct {
	Post     Post        `json:"post"`
	User     User        `json:"user"`
	Comments interface{} `json:"comments"`
}

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.Post.ID,
		&i.Post.Title,
		&i.Post.Body,
		&i.Post.UserID,
		&i.Post.IsPublished,
		&i.Post.IsDraft,
		&i.Post.CreatedAt,
		&i.Post.UpdatedAt,
		&i.Post.DeletedAt,
		&i.Post.Image,
		&i.User.ID,
		&i.User.Username,
		&i.User.Email,
		&i.User.Password,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.DeletedAt,
		&i.Comments,
	)
	return i, err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT posts.id, posts.title, posts.body, posts.user_id, posts.is_published, posts.is_draft, posts.created_at, posts.updated_at, posts.deleted_at, posts.image, users.id, users.username, users.email, users.password, users.created_at, users.updated_at, users.deleted_at FROM posts
JOIN users ON posts.user_id = users.id
WHERE user_id = $1
`

type GetPostsByUserIDRow struct {
	Post Post `json:"post"`
	User User `json:"user"`
}

func (q *Queries) GetPostsByUserID(ctx context.Context, userID uuid.UUID) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Body,
			&i.Post.UserID,
			&i.Post.IsPublished,
			&i.Post.IsDraft,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.Post.DeletedAt,
			&i.Post.Image,
			&i.User.ID,
			&i.User.Username,
			&i.User.Email,
			&i.User.Password,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts 
SET
  title = COALESCE($1, title),
  body = COALESCE($2, body),
  image = COALESCE($3, image),
  is_published = COALESCE($4, is_published),
  is_draft = COALESCE($5, is_draft)
WHERE 
  id = $6
RETURNING id, title, body, user_id, is_published, is_draft, created_at, updated_at, deleted_at, image
`

type UpdatePostParams struct {
	Title       sql.NullString `json:"title"`
	Body        sql.NullString `json:"body"`
	Image       sql.NullString `json:"image"`
	IsPublished sql.NullBool   `json:"is_published"`
	IsDraft     sql.NullBool   `json:"is_draft"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Body,
		arg.Image,
		arg.IsPublished,
		arg.IsDraft,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.IsPublished,
		&i.IsDraft,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Image,
	)
	return i, err
}
